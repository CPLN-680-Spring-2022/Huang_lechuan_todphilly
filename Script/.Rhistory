library(tidycensus)
library(ggplot2)
library(tidyverse)
library(dplyr)
library(rgdal)
library(sf)
root.dir = "https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/DATA/"
source("https://raw.githubusercontent.com/urbanSpatial/Public-Policy-Analytics-Landing/master/functions.r")
census_api_key("3050a770b2aedfa128dd2ccc6ca8b8524fccc775", overwrite = TRUE)
palette5 <- c("#25CB10", "#5AB60C", "#8FA108",   "#C48C04", "#FA7800")
Study.sf <- st_read("C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/raw_data/Ticycensus/Tract_map_0203.shp")
View(Study.sf)
DVRPC_TOD <- st_read("C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/raw_data/DVRPC_TOD/TOD_Opportunities.shp")
View(DVRPC_TOD)
DVRPC_railstops <-
rbind(
st_read("https://opendata.arcgis.com/datasets/119efe00325947e988db8b3966151a92_0.geojson") %>%
mutate(Line = "Metro",) %>%
select(station, line, operator, state))%>%
st_transform(st_crs(Study.sf))
DVRPC_railstops <- filter(DVRPC_railstops, operator != "Amtrak")%>%
mutate(type_sym = ifelse(line == "Market/Frankford Line", "MFL",
ifelse(line == "Broad Street Line", "BSL",
ifelse(line == "PATCO", "PATCO",
ifelse(line == "Norristown High Speed Line", "NHSL",
ifelse(line == "River Line", "NJT_RiverLine",
ifelse(line == "Northeast Corridor", "NJT_NEC",
ifelse(line == "Atlantic City Line", "NJT_Atlantic",
ifelse(line == "RiverLine", "NJT_Riverline",
ifelse(line == "Route 101 & 102 Trolley Lines" |line == "Route 101 Trolley" |line == "Route 102 Trolley", "Trolley", "SEPTA_RR"))))))))))
DVRPC_railstops <- filter(DVRPC_railstops, state != "Delaware")%>%
mutate(type = ifelse(type_sym == "MFL" | type_sym == "BSL" | type_sym == "PATCO", "Transit_Rail",
ifelse(type_sym == "NHSL" | type_sym == "NJT_Riverline", "Light_Rail",
ifelse(type_sym == "Trolley", "Trolley", "Regional_Rail"))))%>%
dplyr::select(-state)
View(DVRPC_railstops)
#BSL, MFL, NHSL, ATLANTIC, NEC, RIVERLINE, PATCO, SEPTA, Trolley
ggplot() +
geom_sf(data=Study.sf) +
geom_sf(data=DVRPC_railstops,
aes(colour = type_sym),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("#ff8f1c", "#007dc3", "#781d7e", "#005DAA", "#EF3E42","#00A5E3", "#EF3E42", "#0255a1","#5d9731")) +
labs(title="Rail Stops in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
st_write(DVRPC_railstops, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/raw_data/Greater_Philadelphia_Passenger_Rail_Station/Transitstations.shp")
#Buffer
Buffers <-
rbind(st_buffer(DVRPC_railstops, 800) %>%
mutate(Legend = "Buffer") %>%
dplyr::select(Legend),
st_union(st_buffer(DVRPC_railstops, 800)) %>%
st_sf() %>%
mutate(Legend = "Unioned Buffer"))
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(data=Buffers) +
geom_sf(data=DVRPC_railstops, show.legend = "point") +
facet_wrap(~Legend) +
labs(caption = "Figure xx") +
mapTheme()
Vacantlots <- filter(Study.sf, TotalPop > 500)%>%
dplyr::select(GEOID, NAME, TotalPop, Totallot, Vacant_lot)%>%
mutate(pct_vacant = (Vacant_lot/Totallot) * 100)
View(Study.sf)
Vacantlots <- filter(Study.sf, TotalPop > 500)%>%
dplyr::select(GEOID, NAME, TotalPp, Totallot, Vacant_lot)%>%
mutate(pct_vacant = (Vacant_lot/Totallot) * 100)
Vacantlots <- filter(Study.sf, TotalPp > 500)%>%
dplyr::select(GEOID, NAME, TotalPp, Totallot, Vacant_lot)%>%
mutate(pct_vacant = (Vacant_lot/Totallot) * 100)
Vacantlots <- filter(Study.sf, TotalPp > 500)%>%
dplyr::select(GEOID, NAME, TotalPp, Totallt, Vcnt_lt)%>%
mutate(pct_vacant = (Vcnt_lt/Totallt) * 100)
ggplot(Vacantlots)+
geom_sf(data = st_union(Vacantlots))+
geom_sf(aes(fill = q5(pct_vacant))) +
geom_sf(data = unionbuffer, fill = "transparent", color = "red")+
scale_fill_manual(values = c("#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac"),
labels = qBr(Vacantlots, "pct_vacant"),
name = "pct_vacant\n(Quintile Breaks)") +
labs(title = "Percentage of Vacant lot", subtitle = "DVRPC") +
mapTheme() +
theme(plot.title = element_text(size=22))
unionbuffer <- filter(Buffers, Legend=="Unioned Buffer")
ggplot(Vacantlots)+
geom_sf(data = st_union(Vacantlots))+
geom_sf(aes(fill = q5(pct_vacant))) +
geom_sf(data = unionbuffer, fill = "transparent", color = "red")+
scale_fill_manual(values = c("#f0f9e8","#bae4bc","#7bccc4","#43a2ca","#0868ac"),
labels = qBr(Vacantlots, "pct_vacant"),
name = "pct_vacant\n(Quintile Breaks)") +
labs(title = "Percentage of Vacant lot", subtitle = "DVRPC") +
mapTheme() +
theme(plot.title = element_text(size=22))
selectCentroids <-
st_centroid(Study.sf)[Buffers,] %>%
st_drop_geometry() %>%
left_join(dplyr::select(Study.sf, GEOID)) %>%
st_sf() %>%
mutate(Selection_Type = "Select by Centroids")
TODtracts <-
rbind(
st_centroid(Study.sf)[Buffers,] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "TOD"),
st_centroid(Study.sf)[Buffers, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "Non-TOD"))
TODtracts <- rbind(
st_centroid(Study.sf)[Buffers,] %>%
na.omit()%>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "TOD"),
st_centroid(Study.sf)[Buffers, op = st_disjoint] %>%
na.omit()%>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "Non-TOD"))
TODtracts <- rbind(
st_centroid(Study.sf)[unionbuffer,] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "TOD"),
st_centroid(Study.sf)[unionbuffer, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "Non-TOD"))
View(Study.sf)
PA <- get_acs(geography = "tract", variables = c("B01001_001", "B11016_001", "B02001_002", "B02001_003", "B02001_005", "B03001_003",
"B06011_001", "B05010_001", "B07013_002", "B07013_003",
"B25002_001", "B25002_003"),
year=2019, state=42, county=c(101, 091, 045, 029, 017), geometry=T)%>% #101 = Philco, 091 = Montgomery, 045 = Delco, 029 = Chesco, 017= Bucks
dplyr::select(-moe)%>%
spread(variable, estimate)%>%
rename(TotalPop = B01001_001, TotalHH = B11016_001,
White = B02001_002, Black = B02001_003, Asian = B02001_005, Hispanic_Latinx = B03001_003,
MedIncome = B06011_001, Poverty_rt = B05010_001, own_housing = B07013_002, rt_houwing = B07013_003,
Totallot = B25002_001, Vacant_lot = B25002_003)
NJ <- get_acs(geography = "tract", variables = c("B01001_001", "B11016_001", "B02001_002", "B02001_003", "B02001_005", "B03001_003",
"B06011_001", "B05010_001", "B07013_002", "B07013_003",
"B25002_001", "B25002_003"),
year=2019, state=34, county=c(007, 005, 015, 021), geometry=T)%>% #007 Camden, 005 Burlington, 015 Gloucester, 021 Mercer
dplyr::select(-moe)%>%
spread(variable, estimate)%>%
rename(TotalPop = B01001_001, TotalHH = B11016_001,
White = B02001_002, Black = B02001_003, Asian = B02001_005, Hispanic_Latinx = B03001_003,
MedIncome = B06011_001, Poverty_rt = B05010_001, own_housing = B07013_002, rt_houwing = B07013_003,
Totallot = B25002_001, Vacant_lot = B25002_003)
Study.sf2 <- rbind(NJ, PA)%>%
mutate(State = ifelse(startsWith(GEOID, "42"), "Pennsylvania", ifelse(startsWith(GEOID, "34"), "New Jersey", "")),
County = ifelse(startsWith(GEOID, "42101"), "Philadelphia",
ifelse(startsWith(GEOID, "42091"), "Montgomery",
ifelse(startsWith(GEOID, "42045"), "Delaware",
ifelse(startsWith(GEOID, "42029"), "Chester",
ifelse(startsWith(GEOID, "42017"), "Bucks",
ifelse(startsWith(GEOID, "34007"), "Camden",
ifelse(startsWith(GEOID, "34005"), "Burlington",
ifelse(startsWith(GEOID, "34015"), "Gloucester",
ifelse(startsWith(GEOID, "34021"), "Mercer", ""))))))))))
TODtracts <- rbind(
st_centroid(Study.sf2)[unionbuffer,] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "TOD"),
st_centroid(Study.sf2)[unionbuffer, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "Non-TOD"))
PA <- get_acs(geography = "block", variables = c("B01001_001", "B11016_001", "B02001_002", "B02001_003", "B02001_005", "B03001_003",
"B06011_001", "B05010_001", "B07013_002", "B07013_003",
"B25002_001", "B25002_003"),
year=2019, state=42, county=c(101, 091, 045, 029, 017), geometry=T)%>% #101 = Philco, 091 = Montgomery, 045 = Delco, 029 = Chesco, 017= Bucks
dplyr::select(-moe)%>%
spread(variable, estimate)%>%
rename(TotalPop = B01001_001, TotalHH = B11016_001,
White = B02001_002, Black = B02001_003, Asian = B02001_005, Hispanic_Latinx = B03001_003,
MedIncome = B06011_001, Poverty_rt = B05010_001, own_housing = B07013_002, rt_houwing = B07013_003,
Totallot = B25002_001, Vacant_lot = B25002_003)
TODtracts <- rbind(
st_centroid(Study.sf2)[unionbuffer,] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "TOD"),
st_centroid(Study.sf2)[unionbuffer, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "Non-TOD"))
sf_use_s2(FALSE)
TODtracts <- rbind(
st_centroid(Study.sf2)[unionbuffer,] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "TOD"),
st_centroid(Study.sf2)[unionbuffer, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "Non-TOD"))
View(TODtracts)
TODtracts <- rbind(
st_centroid(Study.sf)[unionbuffer,] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "TOD"),
st_centroid(Study.sf)[unionbuffer, op = st_disjoint] %>%
st_drop_geometry() %>%
left_join(Study.sf) %>%
st_sf() %>%
mutate(TOD = "Non-TOD"))
ggplot(Vacantlots)+
geom_sf(data = st_union(Vacantlots))+
geom_sf(aes(fill = q5(pct_vacant))) +
geom_sf(data = unionbuffer, fill = "transparent", color = "red")+
scale_fill_manual(values = c("#f0f9e8","#bae4bc"),
labels = qBr(Vacantlots, "TOD"),
name = "Boolean") +
labs(title = "Percentage of Vacant lot", subtitle = "DVRPC") +
mapTheme() +
theme(plot.title = element_text(size=22))
ggplot() +
geom_sf(data=TODtracts,
aes(colour = TOD)) +
scale_colour_manual(values = c("#ff8f1c", "#007dc3")) +
labs(title="Rail Stops in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=TODtracts,
aes(fill = TOD)) +
scale_colour_manual(values = c("#ff8f1c", "#007dc3")) +
labs(title="Rail Stops in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=TODtracts,
aes(fill = TOD)) +
labs(title="Rail Stops in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=TODtracts,
aes(fill = TOD, color = c("#f0f9e8","#bae4bc"))) +
labs(title="TOD tracks in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=TODtracts,
aes(fill = TOD, colour = c("#f0f9e8","#bae4bc"))) +
labs(title="TOD tracks in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=TODtracts,
aes(fill = TOD, colour = c("#f0f9e8"))) +
labs(title="TOD tracks in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=TODtracts,
aes(fill = TOD)) +
labs(title="TOD tracks in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=TODtracts) +
geom_sf(aes(fill = q5(TOD))) +
labs(title="TOD tracks in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=TODtracts,
aes(fill = TOD)) +
labs(title="TOD tracks in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=TODtracts,
aes(fill = TOD)) +
labs(title="TOD tracts in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
st_write(TODtracts, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/cleaned_data/Tract_map_TOD_0208.shp")
TODyes <- filter(TODtracts, TOD == "TOD")
View(TODyes)
ggplot() +
geom_sf(data=TODyes,
aes(fill = TOD)) +
labs(title="TOD tracts in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(data=TODyes,
aes(fill = TOD)) +
labs(title="TOD tracts in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(data=TODyes,
aes(fill = TOD)) +
geom_sf(data=DVRPC_railstops,
aes(colour = type_sym),
show.legend = "point", size= 2) +
scale_colour_manual(values = c("#ff8f1c", "#007dc3", "#781d7e", "#005DAA", "#EF3E42","#00A5E3", "#EF3E42", "#0255a1","#5d9731")) +
labs(title="TOD tracts in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(data=TODyes,
aes(fill = TOD)) +
geom_sf(data=DVRPC_railstops,
aes(colour = type_sym),
show.legend = "point", size= 2) +
geom_sf(data = unionbuffer, fill = "transparent", color = "red")+
scale_colour_manual(values = c("#ff8f1c", "#007dc3", "#781d7e", "#005DAA", "#EF3E42","#00A5E3", "#EF3E42", "#0255a1","#5d9731")) +
labs(title="TOD tracts in DVRPC",
subtitle="Philadelphia, PA",
caption="Figure xx") +
mapTheme()
st_write(TODyes, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/cleaned_data/TODtracts.shp")
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson") %>%
DVRPC_P+Rs <-
rbind(
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson"))
DVRPC_P+Rs <-
rbind(
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson") %>%
select(facility, type, line, service, county, state))
DVRPC_P <-
rbind(
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson") %>%
select(facility, type, line, service, county, state))
View(DVRPC_P)
DVRPC_P <-
rbind(
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson") %>%
select(facility, type, line, service, county, state, st_area(shape)))
DVRPC_P <-
rbind(
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson") %>%
select(facility, type, line, service, county, state, "st_area(shape)"))
DVRPC_P <-
rbind(
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson") %>%
select())
View(DVRPC_P)
DVRPC_P <-
rbind(
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson") %>%
select(facility, type, line, service, county, state))
DVRPC_P <-
rbind(
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson") %>%
select(facility, type, line, service, county, state))%>%
st_transform(st_crs(Study.sf))  %>%
mutate(area = st_area())
DVRPC_P <-
rbind(
st_read("https://opendata.arcgis.com/datasets/45e0360128aa40448303c6458ca1a075_0.geojson") %>%
select(facility, type, line, service, county, state))%>%
st_transform(st_crs(Study.sf))  %>%
mutate(area = st_area(DVRPC_P))
View(DVRPC_P)
typeof(DVRPC_P$area)
DVRPC_Parcel <- st_read("C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/raw_data/Greater_Philadelphia_2015_Land_Use/Greater_Philadelphia_2015_Land_Use.shp")
DVRPC_Parcel <-
rbind(
st_read("https://arcgis.dvrpc.org/portal/rest/services/Planning/DVRPC_LandUse_2015/FeatureServer/0/query?outFields=*&where=1%3D1") %>%
select(geoid, lu15dev, mixeduse, lu15subn, state_name, co_name, mun_name, acres))%>%
st_transform(st_crs(Study.sf))
DVRPC_Parcel <- st_read("C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/raw_data/Greater_Philadelphia_2015_Land_Use.shp.shp")
DVRPC_Parcel <- st_read("C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/raw_data/Greater_Philadelphia_2015_Land_Use.shp")
TOD_parcel <- st_join(TODyes, DVRPC_Parcel, join = st_intersects, left = TRUE, largest = FALSE)
DVRPC_Parcel <- DVRPC_Parcel%>%
st_transform(st_crs(Study.sf))
TOD_parcel <- st_join(TODyes, DVRPC_Parcel, join = st_intersects, left = TRUE, largest = FALSE)
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(dataDVRPC_Parcel) +
labs(caption = "Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(data=DVRPC_Parcel) +
labs(caption = "Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(data=DVRPC_Parcel) +
labs(caption = "Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(data=st_union(DVRPC_Parcel)) +
labs(caption = "Figure xx") +
mapTheme()
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(data=st_union(TOD_parcel)) +
labs(caption = "Figure xx") +
mapTheme()
st_write(TOD_parcel, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/cleaned_data/TOD_parcels.shp")
View(DVRPC_Parcel)
View(TOD_parcel)
TOD_parcel <- st_join(TODyes, DVRPC_Parcel, join = st_contains, left = TRUE, largest = FALSE)
View(TOD_parcel)
TOD_parcel <- st_join(TODyes, DVRPC_Parcel, join = st_contains)
View(TOD_parcel)
TOD_parcel <- st_join(DVRPC_Parcel, TODyes, join = st_contains)
View(TOD_parcel)
TOD_parcel <- TOD_parcel%>%
dplyr::select(-GEOID, NAME, TotalPp, White, Black, Asian, Hspnc_L, Pvrty_r, MedIncm, own_hsn, rt_hwng, TotalHH, Totallt, Vcnt_lt, State, County, TOD)
View(TOD_parcel)
TOD_parcel <- TOD_parcel%>%
dplyr::select(-GEOID, -NAME, -TotalPp, -White, -Black, -Asian, -Hspnc_L, -Pvrty_r, -MedIncm, -own_hsn, -rt_hwng, -TotalHH, -Totallt, -Vcnt_lt, -State, -County, -TOD)
TOD_parcel <- TOD_parcel%>%
dplyr::select(-NAME, -TotalPp, -White, -Black, -Asian, -Hspnc_L, -Pvrty_r, -MedIncm, -own_hsn, -rt_hwng, -TotalHH, -Totallt, -Vcnt_lt, -State, -County, -TOD)
View(TOD_parcel)
ggplot() +
geom_sf(data=st_union(Study.sf)) +
geom_sf(data=st_union(TOD_parcel)) +
labs(caption = "Figure xx") +
mapTheme()
st_write(TOD_parcel, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/cleaned_data/TOD_parcels.shp")
gc()
st_write(TOD_parcel, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/cleaned_data/TOD_parcels.shp")
TOD_parcel2 <- st_collection_extract(TOD_parcel, "POLYGON")
st_write(TOD_parcel2, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/cleaned_data/TOD_parcels.shp")
TOD_parcel2 <- TOD_parcel%>%
st_sf()
st_write(TOD_parcel2, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/cleaned_data/TOD_parcels.shp")
TOD_parcel <- st_join(DVRPC_Parcel, TODyes, join = st_contains)%>%
dplyr::select(-GEOID, -NAME, -TotalPp, -White, -Black, -Asian, -Hspnc_L, -Pvrty_r, -MedIncm, -own_hsn, -rt_hwng, -TotalHH, -Totallt, -Vcnt_lt, -State, -County, -TOD)%>%
st_sf()
st_write(TOD_parcel, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/cleaned_data/TOD_parcels.shp")
View(TOD_parcel)
st_write(TOD_parcel, "C:/Users/mnxan/OneDrive/Documents/GitHub/Huang_lechuan_todphilly/cleaned_data/TOD_parcels.csv")
